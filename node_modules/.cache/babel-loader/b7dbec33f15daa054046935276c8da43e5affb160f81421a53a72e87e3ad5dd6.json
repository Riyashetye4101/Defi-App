{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Riyas\\\\OneDrive\\\\Desktop\\\\Defi\\\\todoapp\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport Navbar from './Sidenavbar/Sidebar';\nimport Home from './Todosection/TodoList';\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport abi from './contractJson/TodoLists.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [state, setState] = useState({\n    provider: null,\n    signer: null,\n    contract: null\n  });\n  const [account, setAccount] = useState('Not connected');\n  const [signer, setSigner] = useState(null);\n  useEffect(() => {\n    const template = async () => {\n      const contractAddress = \"0xcBFCe0B08196677E32e14cf4fc12D801bAB0f34A\";\n      const contractABI = abi.abi;\n\n      // code to connect to metamask\n      // metamask is used for following:-\n      // 1. In order do transactions on goerli test n/w\n      //2. metamask consists of infura api which helps to connect to the blockchain\n\n      try {\n        const {\n          ethereum\n        } = window;\n        const account = await ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        window.ethereum.on(\"accountsChanged\", () => {\n          window.location.reload();\n        });\n        setAccount(account);\n        const provider = new ethers.providers.Web3Provider(ethereum); // read the blockchain\n        const signer = await provider.getSigner(); // write the blockchain\n        // setSigner(provider.getSigner());\n        alert(signer);\n        const contract = new ethers.Contract(contractAddress, contractABI, provider.getSigner());\n        setState({\n          provider,\n          signer,\n          contract\n        });\n        console.log(\"this a state\", state);\n        console.log(contract);\n        // console.log(signer.getAddress());\n      } catch (error) {\n        alert(error);\n      }\n    };\n    template();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"n7ZuAHj6eaiwvbZxA9EXjmlq4ZQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Navbar","Home","useState","useEffect","ethers","abi","jsxDEV","_jsxDEV","App","_s","state","setState","provider","signer","contract","account","setAccount","setSigner","template","contractAddress","contractABI","ethereum","window","request","method","on","location","reload","providers","Web3Provider","getSigner","alert","Contract","console","log","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Riyas/OneDrive/Desktop/Defi/todoapp/src/App.js"],"sourcesContent":["\nimport Navbar from './Sidenavbar/Sidebar';\nimport Home from './Todosection/TodoList'\nimport { useState,useEffect } from 'react';\nimport {ethers} from 'ethers';\nimport abi from './contractJson/TodoLists.json';\n \n\nfunction App() {\n  const [state, setState] = useState({provider:null,signer:null,contract:null});\n  const [account,setAccount]=useState('Not connected');\n  const [signer,setSigner]=useState(null);\n \n\n  \n\n  useEffect(()=>{\n     const template= async()=>{\n          const contractAddress = \"0xcBFCe0B08196677E32e14cf4fc12D801bAB0f34A\";\n          const contractABI = abi.abi;\n\n          // code to connect to metamask\n          // metamask is used for following:-\n          // 1. In order do transactions on goerli test n/w\n          //2. metamask consists of infura api which helps to connect to the blockchain\n\n          try{\n          const {ethereum}=window;\n\n          const account= await ethereum.request({\n            method:\"eth_requestAccounts\"\n          });\n\n          window.ethereum.on(\"accountsChanged\",()=>{\n            window.location.reload();\n          })\n          setAccount(account);\n          const provider = new ethers.providers.Web3Provider(ethereum); // read the blockchain\n         const signer =await provider.getSigner(); // write the blockchain\n          // setSigner(provider.getSigner());\n          alert(signer);\n          const contract= new ethers.Contract(\n            contractAddress,\n            contractABI,\n            provider.getSigner()\n          );\n          \n          \n          setState({provider,signer,contract});\n          \n          console.log(\"this a state\",state);\n          console.log(contract);\n          // console.log(signer.getAddress());\n        }\n        catch(error){\n          alert(error);\n        }\n     }\n     \ntemplate();\n  },[]);\n  \n  return (\n    <div className=\"App\">\n      \n      <Navbar/>\n      \n      <Home/>\n\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AACA,OAAOA,MAAM,MAAM,sBAAsB;AACzC,OAAOC,IAAI,MAAM,wBAAwB;AACzC,SAASC,QAAQ,EAACC,SAAS,QAAQ,OAAO;AAC1C,SAAQC,MAAM,QAAO,QAAQ;AAC7B,OAAOC,GAAG,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGhD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC;IAACU,QAAQ,EAAC,IAAI;IAACC,MAAM,EAAC,IAAI;IAACC,QAAQ,EAAC;EAAI,CAAC,CAAC;EAC7E,MAAM,CAACC,OAAO,EAACC,UAAU,CAAC,GAACd,QAAQ,CAAC,eAAe,CAAC;EACpD,MAAM,CAACW,MAAM,EAACI,SAAS,CAAC,GAACf,QAAQ,CAAC,IAAI,CAAC;EAKvCC,SAAS,CAAC,MAAI;IACX,MAAMe,QAAQ,GAAE,MAAAA,CAAA,KAAS;MACpB,MAAMC,eAAe,GAAG,4CAA4C;MACpE,MAAMC,WAAW,GAAGf,GAAG,CAACA,GAAG;;MAE3B;MACA;MACA;MACA;;MAEA,IAAG;QACH,MAAM;UAACgB;QAAQ,CAAC,GAACC,MAAM;QAEvB,MAAMP,OAAO,GAAE,MAAMM,QAAQ,CAACE,OAAO,CAAC;UACpCC,MAAM,EAAC;QACT,CAAC,CAAC;QAEFF,MAAM,CAACD,QAAQ,CAACI,EAAE,CAAC,iBAAiB,EAAC,MAAI;UACvCH,MAAM,CAACI,QAAQ,CAACC,MAAM,CAAC,CAAC;QAC1B,CAAC,CAAC;QACFX,UAAU,CAACD,OAAO,CAAC;QACnB,MAAMH,QAAQ,GAAG,IAAIR,MAAM,CAACwB,SAAS,CAACC,YAAY,CAACR,QAAQ,CAAC,CAAC,CAAC;QAC/D,MAAMR,MAAM,GAAE,MAAMD,QAAQ,CAACkB,SAAS,CAAC,CAAC,CAAC,CAAC;QACzC;QACAC,KAAK,CAAClB,MAAM,CAAC;QACb,MAAMC,QAAQ,GAAE,IAAIV,MAAM,CAAC4B,QAAQ,CACjCb,eAAe,EACfC,WAAW,EACXR,QAAQ,CAACkB,SAAS,CAAC,CACrB,CAAC;QAGDnB,QAAQ,CAAC;UAACC,QAAQ;UAACC,MAAM;UAACC;QAAQ,CAAC,CAAC;QAEpCmB,OAAO,CAACC,GAAG,CAAC,cAAc,EAACxB,KAAK,CAAC;QACjCuB,OAAO,CAACC,GAAG,CAACpB,QAAQ,CAAC;QACrB;MACF,CAAC,CACD,OAAMqB,KAAK,EAAC;QACVJ,KAAK,CAACI,KAAK,CAAC;MACd;IACH,CAAC;IAENjB,QAAQ,CAAC,CAAC;EACR,CAAC,EAAC,EAAE,CAAC;EAEL,oBACEX,OAAA;IAAK6B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAElB9B,OAAA,CAACP,MAAM;MAAAsC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAETlC,OAAA,CAACN,IAAI;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEJ,CAAC;AAEV;AAAChC,EAAA,CA/DQD,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AAiEZ,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}